import time
import html
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# --- Setup Chrome ---
options = Options()
options.add_argument("--start-maximized")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)

driver = webdriver.Chrome(options=options)
wait = WebDriverWait(driver, 20)

# --- Step 1: Load site ---
driver.get("https://courses.unisg.ch/event/event-hierarchy")
wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
time.sleep(3)

# --- Step 2: Switch to German ---
print("üåê Switching to Deutsch...")
de_element = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[normalize-space()='DE'])[1]")))
de_element.click()
time.sleep(5)

# --- Step 3: Navigate to 18MBIh ---
print("üìö Opening Master menu...")
master_element = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[normalize-space()='Master'])[1]")))
master_element.click()
time.sleep(2)

print("üéì Selecting 18MBIh program...")
mbi_program = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[contains(text(),'18MBIh')])[1]")))
mbi_program.click()
time.sleep(3)

# --- Step 4: Smart Tree Expansion ---
print("üå≤ Starting recursive tree unfolding...")

# Full list including duplicates to match all paths
target_labels = [
    "Fachstudium", "Pflichtbereich", "Forschungsmethoden f√ºr Gesch√§ftsinnovation",
    "Pflichtwahl- und Wahlbereich", "Forschungs-, Praxis-, Ventureprojekte / Issue Coverage",
    "ohne Vertiefung", "Business Development", "Digital Channel & Customer Relationship Management",
    "Start-up & Scale-up Entrepreneurship", "Supply Chain & Operations Management",
    "Technology Solution Architect", "Transforming and Managing Digital Business", "Methodenkurs",
    "Business Development", "Digital Channel & Customer Relationship Management",
    "Start-up & Scale-up Entrepreneurship", "Transforming and Managing Digital Business",
    "Pflichtwahlbereich", "ohne Vertiefung", "Business Development",
    "Digital Channel & Customer Relationship Management", "Start-up & Scale-up Entrepreneurship",
    "Supply Chain & Operations Management", "Technology Solution Architect",
    "Transforming and Managing Digital Business", "Wahlbereich", "Kontextstudium",
    "Fokusbereiche", "Skills"
]

clicked_paths = set()
max_rounds = 50
rounds = 0

while rounds < max_rounds:
    found_new = False
    nodes = driver.find_elements(By.CSS_SELECTOR, "mat-tree-node")

    for node in nodes:
        try:
            label_span = node.find_element(By.XPATH, ".//span[normalize-space()]")
            label = html.unescape(label_span.text.strip())

            if label not in target_labels:
                continue

            # Use a unique node ID to support duplicate labels in different branches
            node_key = f"{label}_{node.get_attribute('aria-level')}_{node.get_attribute('aria-posinset')}"

            if node_key not in clicked_paths:
                btn = node.find_element(By.XPATH, ".//button")
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
                btn.click()
                print(f"üîÅ Clicked: {label} (level {node.get_attribute('aria-level')})")
                found_new = True
                time.sleep(1.2)

                clicked_paths.add(node_key)
        except Exception:
            continue

    if not found_new:
        rounds += 1
        time.sleep(1)
    else:
        rounds = 0  # Reset if progress was made

print("‚úÖ Finished unfolding all tree layers.")

# --- Pause for manual inspection ---
print("üîç Pausing browser for 5 minutes so you can inspect the tree...")
time.sleep(300)

# --- Optional: Close browser after test
driver.quit()

