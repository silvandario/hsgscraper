import time
import html
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# --- Setup Chrome ---
options = Options()
options.add_argument("--start-maximized")
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)

driver = webdriver.Chrome(options=options)
wait = WebDriverWait(driver, 20)

# --- Open HSG course page ---
driver.get("https://courses.unisg.ch/event/event-hierarchy")
wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
time.sleep(3)

# --- Switch to German ---
print("üåê Switching to Deutsch...")
de_element = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[normalize-space()='DE'])[1]")))
de_element.click()
time.sleep(5)

# --- Navigate to 18MBIh program ---
print("üéì Navigating to 18MBIh...")
master_element = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[normalize-space()='Master'])[1]")))
master_element.click()
time.sleep(1)

mbi_program = wait.until(EC.element_to_be_clickable((By.XPATH, "(//span[contains(text(),'18MBIh')])[1]")))
mbi_program.click()
time.sleep(2)

# --- Helper function to click node by label ---
def click_node_by_label(label_text):
    try:
        node_button = wait.until(EC.element_to_be_clickable(
            (By.XPATH, f"(//span[normalize-space()='{label_text}'])[1]/preceding-sibling::button")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", node_button)
        driver.execute_script("arguments[0].click();", node_button)
        print(f"‚úÖ Clicked: {label_text}")
        time.sleep(2)
    except Exception as e:
        print(f"‚ùå Failed to click '{label_text}': {e}")

# --- Click required path ---
click_node_by_label("Fachstudium")
click_node_by_label("Pflichtwahl- und Wahlbereich")

# --- Wait for Pflichtwahlbereich to load as a child node ---
print("‚è≥ Waiting for 'Pflichtwahlbereich' to appear at level 5 or 6...")
success = False
for _ in range(10):  # Try for up to ~10 seconds
    nodes = driver.find_elements(By.CSS_SELECTOR, "mat-tree-node")
    for node in nodes:
        try:
            level = node.get_attribute("aria-level")
            label = html.unescape(node.find_element(By.XPATH, ".//span[normalize-space()]").text.strip())
            if label == "Pflichtwahlbereich" and level in ("5", "6"):
                print(f"‚úÖ Found 'Pflichtwahlbereich' at level {level}")
                button = node.find_element(By.XPATH, ".//button")
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                driver.execute_script("arguments[0].click();", button)  # JS-based click to avoid interception
                time.sleep(2)
                success = True
                break
        except:
            continue
    if success:
        break
    time.sleep(1)

if not success:
    print("‚ùå 'Pflichtwahlbereich' did not appear in time.")

# --- Log children under Pflichtwahlbereich ---
print("\nüîç Logging children under 'Pflichtwahlbereich':")
child_nodes = driver.find_elements(By.CSS_SELECTOR, "mat-tree-node")

for node in child_nodes:
    try:
        level = node.get_attribute("aria-level")
        label = html.unescape(node.find_element(By.XPATH, ".//span[normalize-space()]").text.strip())
        if level == "6":
            print(f"  - Level {level}: {label}")
    except:
        continue

# --- Pause for inspection ---
print("\nüîé Browser is open for 5 minutes. Please verify the tree visually.")
time.sleep(300)

# Uncomment to automatically close when you're done
# driver.quit()
